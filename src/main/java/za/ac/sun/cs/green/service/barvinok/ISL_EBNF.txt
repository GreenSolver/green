/*
 * This file is part of the Green library, https://greensolver.github.io/green/
 *
 * Copyright (c) 2019, Computer Science, Stellenbosch University.  All rights reserved.
 *
 * Licensed under GNU Lesser General Public License, version 3.
 * See LICENSE.md file in the project root for full license information.
 */

// ======================================================================
//
// This file describes a hand-derived EBNF grammar for the output of the
// Barvinok system.
//
// Author: JH Taljaard.
// Contributor: Jaco Geldenhuys
//
// ======================================================================

// ----------------------------------------------------------------------
//
// PARSER
//
// ----------------------------------------------------------------------

<output>    ::= [ <params> "->" ] "{" <body> { ";" <body> } "}"
<params>    ::= "[" <variable> { "," <variable> } "]"

<body>      ::= <expr> [ ":" <expr> }
<expr>      ::= <expr0> { "and" <expr0> }
<expr0>     ::= <expr1> { <equality> <expr1> }
<expr1>     ::= <term> { ( "+" | "-" ) <term> }
<term>      ::= <term1> { ( "*" | "/" | "<empty>" ) <term1> }
<term1>     ::= <factor> { "^" <factor> }
<factor>    ::= <integer> | <variable> | <floor> | "(" <expr> ")" | "-" <expr> | "not" <expr>
<floor>     ::= "floor" "(" <expr> ")"

// ----------------------------------------------------------------------
//
// SCANNER
//
// ----------------------------------------------------------------------

<variable>  ::= <letter> { <letter> | <digit> }
<integer>   ::= <digit> { <digit> }

<operator>  ::= "+" | "-" | "*" | "^" | "/" | <equality>
<equality>  ::= ">" | ">=" | "<" | "<=" | "=" | "!="
<letter>    ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" |
                "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" |
                "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" |
                "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" |
                "w" | "x" | "y" | "z"
<digit>     ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
