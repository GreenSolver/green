#summary One-sentence summary of this page.

When a client creates an instance of Green is created, a configuration can be passed to describe the behaviour of the instance.

= Setting the task manager =

{{{
green.taskmanager = <classname>
}}}

= Setting up services =

Green can be configure with any number of services.  An initial setting determines the initial list of services:

{{{
green.services = <service1>, <service2>, <service3> ...
}}}

If a service `serv` has been configured, and an instance `inst` has been created, users can invoke the service by calling

{{{
Object r = inst.request("serv");
}}}

The `request` method returns an `java.lang.Object`, the exact nature of which depends on the service.  For example, for a satisfiability service, a typical invocation might be

{{{
Boolean issat = (Boolean) inst.request("sat");
}}}

The nature of the object depends entirely on the services configured.  The nature of a service is described as follows:

{{{
green.service.<service> = <service-tree>
}}}

The syntax of the service tree is as follows:

{{{
<service-tree> ::= <child1> <child2> <child3> ...
<child> ::= <service-name> | "(" <service-name> <service-tree> ")"
}}}

Each of the services named in a service tree must also be configured:

{{{
green.service.<service>.<service-name> = <classname>
}}}

An example will illustrate this configuration option more clearly.  A SAT service might typically be described as follows:

{{{
green.services = sat
green.service.sat = (cnf (slice (canonize z3 cvc3 choco)))
green.service.sat.cnf = za.ac.sun.cs.green.service.cnf.CNFService
green.service.sat.slice = za.ac.sun.cs.green.service.slicer.SATSlicerService
green.service.sat.canonize = za.ac.sun.cs.green.service.canonizer.SATCanonizerService
green.service.sat.z3 = za.ac.sun.cs.green.service.z3.SATZ3Service
green.service.sat.cvc3 = za.ac.sun.cs.green.service.cvc3.SATCVC3Service
green.service.sat.choco = za.ac.sun.cs.green.service.choco.SATChocoService
}}}

In this example, a service named `sat` is defined.  It consist of a single child `(cnf ...)`.  This means that any instance on which `inst.request("sat")` is invoked, is passed to the `cnf` service, which is implemented by `za.ac.sun.cs.green.service.cnf.CNFService.java`.  The subproblems produced by that service is in turn passed to its only child `(slice ...)`, the subproblems produced by the slicer are passed to its only child `(canonize ...)`, and the subproblems generated by the canonizer are passed to all three its children `z3`, `cvc3`, and `choco`.  These last three are expected to solve the subproblems, and have no children of their own.