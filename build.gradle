plugins {
	id 'application'
	id 'java'
	id 'jacoco'
	id 'eclipse'
	id 'checkstyle'
	id 'maven-publish'
	id 'signing'
}

mainClassName = 'za.ac.sun.cs.green.Green'
group = 'com.github.green-solver'

repositories {
	mavenCentral()
}

dependencies {
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
	compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
	compile group: 'org.apfloat', name: 'apfloat', version: '1.8.2'
	compile group: 'redis.clients', name: 'jedis', version: '2.4.2'
	compile group: 'io.lettuce', name: 'lettuce-core', version: '5.0.5.RELEASE'
	compile group: 'org.choco-solver', name: 'choco-solver', version: '4.0.6'
	compile group: 'org.sosy-lab', name: 'javasmt-solver-z3', version: 'z3-4.4.1-1558-gf96cfea'
	testCompile group: 'junit', name: 'junit', version: '4.12'
	implementation files(org.gradle.internal.jvm.Jvm.current().toolsJar)
}

checkstyle {
	toolVersion '8.1'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

javadoc {
	options.memberLevel = JavadocMemberLevel.PRIVATE
	options.noQualifiers = [ 'java.lang.*', 'java.io.*', 'java.util.*', 'org.apache.*' , 'za.ac.sun.cs.green.' ]
	options.tags = [ 'result:m:"Result:"' ]
	options.overview = 'src/main/resources/overview.html'
	title = 'GREEN API'
}

tasks.register("javadocApi", Javadoc) {
	group = 'Documentation'
	description = 'Generates Javadoc API for documentation purposes.'
	destinationDir = file('build/docs/api')
	options.docletpath = [ file('build/classes/java/main') ]
	options.doclet = 'za.ac.sun.cs.green.util.Doclet'
	options.memberLevel = JavadocMemberLevel.PRIVATE
	options.noQualifiers = [ 'java.lang.*', 'java.io.*', 'java.util.*', 'org.apache.*' , 'za.ac.sun.cs.green.' ]
	options.tags = [ 'result:m:"Result:"' ]
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath
}

//----------------------------------------------------------------------
// Everything below deals with publishing the library on the maven
// central repository
//----------------------------------------------------------------------
 
task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		release(MavenPublication) {
			customizePom(pom)
			version = green_version
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
		snapshot(MavenPublication) {
			customizePom(pom)
			version = green_version + "-SNAPSHOT"
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name = 'release'
			// url = "file://${buildDir}/repo"
			url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
			credentials {
				username repo_username
				password repo_password
			}
		}
		maven {
			name = 'snapshot'
			// url = "file://${buildDir}/snap"
			url = "https://oss.sonatype.org/content/repositories/snapshots"
			credentials {
				username repo_username
				password repo_password
			}
		}
	}
}

signing {
    sign publishing.publications.release
}

publishReleasePublicationToReleaseRepository.dependsOn signReleasePublication

def customizePom(pom) {
	pom.withXml {
		def root = asNode()
		root.dependencies.removeAll { dep ->
			dep.scope == "test"
		}
		root.children().last() + {
			resolveStrategy = Closure.DELEGATE_FIRST
			name 'Green Library'
			description 'Universal interface to decision procedures, constraint solvers, model counters, and related tools'
			url 'https://github.com/GreenSolver/green'
			packaging 'jar'
			organization {
				name 'GreenSolver'
				url 'https://github.com/GreenSolver'
			}
			issueManagement {
				system 'GitHub'
				url 'https://github.com/GreenSolver/green/issues'
			}
			licenses {
				license {
					name 'GNU Lesser General Public License'
					url 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
					distribution 'repo'
				}
			}
			scm {
				url 'https://github.com/GreenSolver/green'
				connection 'scm:git:git@github.com:GreenSolver/green.git'
				developerConnection 'scm:git:git@github.com:GreenSolver/green.git'
			}
			developers {
				developer {
					id 'jacogeld'
					name 'Jaco Geldenhuys'
					email 'jacogeld@gmail.com'
				}
				developer {
					id 'wvisser'
					name 'Willem Visser'
				}
			}
		}
	}
}

tasks.withType(PublishToMavenRepository) {
	onlyIf {
		(repository == publishing.repositories.release && publication == publishing.publications.release) ||
		(repository == publishing.repositories.snapshot && publication == publishing.publications.snapshot)
	}
}
